<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dli.repositories.CourseRepo">

    <resultMap type="com.dli.entities.Course" id="CourseMap">
        <id column="course_id" property="course_id"/>
        <result column="category_id" property="category_id"/>
        <result column="title" property="title"/>
        <result column="principal_user_id" property="principal_user_id"/>
        <result column="department" property="department"/>
        <result column="expiration_date" property="expiration_date"/>
        <result column="intro" property="intro"/>
        <result column="icon" property="icon"/>
        <result column="pic" property="pic"/>
        <result column="type_id" property="type_id"/>
        <result column="company_id" property="company_id"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>

        <result column="study_count" property="study_count"/>
        <result column="collect_count" property="collect_count"/>
        <result column="principal_user_idName" property="principal_user_idName"/>
        <result column="courseCollected" property="courseCollected"/>
    </resultMap>


    <resultMap type="com.dli.entities.CourseCategory" id="CategoryMap">
        <id column="category_id" property="category_id"/>
        <result column="category_name" property="category_name"/>
        <result column="company_id" property="company_id"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
    </resultMap>


    <resultMap type="com.dli.entities.CourseComment" id="CommentMap">
        <id column="comment_id" property="comment_id"/>
        <result column="user_id" property="user_id"/>
        <result column="course_id" property="course_id"/>
        <result column="star" property="star"/>
        <result column="comments" property="comments"/>
        <result column="created_at" property="created_at"/>
        <result column="indicator" property="indicator"/>

        <result column="user_idName" property="user_idName"/>
        <result column="user_idAvatar" property="user_idAvatar"/>
    </resultMap>



    <resultMap type="com.dli.entities.CourseContent" id="ContentMap">
        <id column="content_id" property="content_id"/>
        <result column="sequnce_num" property="sequnce_num"/>
        <result column="sequnce_title" property="sequnce_title"/>
        <result column="content" property="content"/>
        <result column="orignal_path" property="orignal_path"/>
        <result column="content_link" property="content_link"/>
        <result column="content_type" property="content_type"/>
        <result column="course_id" property="course_id"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
    </resultMap>


    <resultMap type="com.dli.entities.CourseLearnProgress" id="ProgressMap">
        <id column="course_id" property="course_id"/>
        <id column="content_id" property="content_id"/>
        <id column="user_id" property="user_id"/>

        <result column="status" property="status"/>
        <result column="created_at" property="created_at"/>
        <result column="learn_at" property="learn_at"/>
    </resultMap>


    <resultMap type="com.dli.entities.SearchResult" id="SearchMap">
        <id column="course_id" property="id"/>
        <result column="title" property="title"/>
        <result column="intro" property="intro"/>
        <result column="icon" property="icon"/>
    </resultMap>

    <select id="getCourseCategoryList"  resultMap="CategoryMap">
        SELECT * FROM course_category where indicator=1 and company_id=#{companyid} LIMIT #{skip},#{take};
    </select>


    <select id="getCourseList" resultMap="CourseMap">
        select result.* ,
  case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
  case when o3.userct is not null  then o3.userct  else 0 end as collect_count
         from (
select   c.* from course  c     left join course_whitelist w on c.course_id=w.course_id
  where indicator=1 and category_id=#{cateid} and
( type_id=1   or   (  type_id=2  and  w.user_id=#{userid}  )  ) )result

left join (
select course_id, count(*)  as  renshu from (
select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
on result.course_id =o1.course_id
left join
(
select  course_id,    total/ct as pingfen from (
select course_id, sum(star) as total , count(comment_id) as ct from course_comment  group by course_id)t)o2
on result.course_id= o2.course_id
left join
(
select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
on   result.course_id= o3.course_id
order by  renshu desc, pingfen desc  limit #{skip},#{take};
    </select>


    <select id="getCourseByID" resultMap="CourseMap">
        select result.*, c1.study_count,c2.collect_count , c3.courseCollected from (
select c.* ,  u.full_name as principal_user_idName from course  c  left join  user u on c.principal_user_id=u.user_id  where u.indicator=1 and c.indicator=1 and course_id=#{id}) result join
(

select count(  distinct user_id) as study_count from learn_progress where  course_id=#{id})c1 on 1=1
join (
select count( user_id) as collect_count from user_favor where item_type='course' and item_id=#{id} )c2 on 1=1
join (
  select  case  when   count(*)  >0 then 1 else 0  end as courseCollected   from user_favor
  where item_type='course'  and  item_id=#{id} and user_id=#{userid})c3 on 1=1  ;

    </select>

    <insert id="addCourseComment" >
        insert  course_comment values(null, #{userid},#{courseid}, #{star},#{comment},#{now} ,1 );
    </insert>

    <select id="getCourseCommentList" resultMap="CommentMap">
        select  c.*  , u.full_name as user_idName, u.avatar as   user_idAvatar from   course_comment  c  join user u on  c.user_id=u.user_id  where c.indicator =1
            and  course_id=#{courseid}   order by  c.created_at desc;
    </select>

    <update id="deleteCommentById"  >
       update   course_comment  set indicator =0    where comment_id = #{id};
    </update>


    <select id="getCourseContentListByID"  resultMap="ContentMap">
          select *  from   course_content where indicator =1 and  course_id= #{id}   order by sequnce_num;
    </select>


    <select id="getLearnProgress" resultMap="ProgressMap">
          select  *  from   learn_progress  where user_id=#{userid} and  content_id=#{contentid};
    </select>
    
    <insert id="addLearnProgress"   >
        insert learn_progress values( #{courseid}, #{contentid} ,#{userid} , 'NotStarted', NULL , now());
    </insert>

    <update id="updateLearnProgress">
        update   learn_progress  set status='Finished' ,learn_at =now() where user_id=#{userid} and content_id=#{contentid};
    </update>

    <select id="searchCourse" resultMap="SearchMap">
          select * from  course where title like '%${keyword}%'    and  indicator=1     and   company_id=#{companyid} limit #{skip}, #{take}
    </select>

    <select id="getCourseListByExamid" resultMap="CourseMap">
select * from course where course_id in (
select  course_id from  exam_course where exam_id= #{examid});

    </select>

    <select id="getMyCourseListInprocess"  resultMap="CourseMap">

      select result.* ,
  case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
  case when o3.userct is not null  then o3.userct  else 0 end as collect_count
         from (
select   c.* from course  c     left join course_whitelist w on c.course_id=w.course_id
  where indicator=1  and  company_id=#{companyid}   and
( type_id=1   or   (  type_id=2  and  w.user_id=#{userid}  )  ) )result

left join (
select course_id, count(*)  as  renshu from (
select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
on result.course_id =o1.course_id
left join
(
select  course_id,    total/ct as pingfen from (
select course_id, sum(star) as total , count(comment_id) as ct from course_comment  group by course_id)t)o2
on result.course_id= o2.course_id
left join
(
select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
on   result.course_id= o3.course_id

JOIN
(
select course_id from   learn_progress  where user_id=#{userid}  and `status`='NotStarted'  group by course_id)o4
on  result.course_id=o4.course_id
order by  renshu desc, pingfen desc  limit #{skip},#{take};

    </select>



    <select id="getMyCourseListFinished"  resultMap="CourseMap">

        select result.* ,
        case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
        case when o3.userct is not null  then o3.userct  else 0 end as collect_count
        from (
        select   c.* from course  c     left join course_whitelist w on c.course_id=w.course_id
        where indicator=1  and    company_id=#{companyid}   and
        ( type_id=1   or   (  type_id=2  and  w.user_id=#{userid}  )  ) )result

        left join (
        select course_id, count(*)  as  renshu from (
        select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
        on result.course_id =o1.course_id
        left join
        (
        select  course_id,    total/ct as pingfen from (
        select course_id, sum(star) as total , count(comment_id) as ct from course_comment  group by course_id)t)o2
        on result.course_id= o2.course_id
        left join
        (
        select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
        on   result.course_id= o3.course_id

        JOIN
        (
         select  DISTINCT course_id from   learn_progress  where user_id=#{userid}   and course_id not in (
        select course_id from   learn_progress  where user_id=#{userid}  and `status`='NotStarted'  group by course_id))o4
        on  result.course_id=o4.course_id
        order by  renshu desc, pingfen desc  limit #{skip},#{take};

    </select>


    <select id="getMyCourseListInTask"  resultMap="CourseMap">

        select result.* ,
        case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
        case when o3.userct is not null  then o3.userct  else 0 end as collect_count,
        case when  o2.course_id is not null then  1 else 0 end  started
        from (
        select   c.* from course  c     left join course_whitelist w on c.course_id=w.course_id
        where indicator=1   and  company_id=#{companyid}   and
        type_id=2  and  w.user_id=#{userid}  )result

        left join (
        select course_id, count(*)  as  renshu from (
        select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
        on result.course_id =o1.course_id
        left join
        (
       SELECT  distinct   course_id from learn_progress where  user_id=#{userid}
        )o2
        on result.course_id= o2.course_id
        left join
        (
        select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
        on   result.course_id= o3.course_id

        LEFT  JOIN
        (
        select  DISTINCT course_id from   learn_progress  where user_id=#{userid}   and course_id not in (
        select course_id from   learn_progress  where user_id=#{userid}  and `status`='NotStarted'  group by course_id))o4
        on  result.course_id=o4.course_id
        where   o4.course_id is null
        order by  started desc  ,renshu desc  limit #{skip},#{take};

    </select>

    <select id="getStudyCourseCountByUserid"   resultType="int">
        select    count(  distinct course_id )from    learn_progress    where user_id=#{userid}
    </select>

    <select id="getCurrentMonthStudyCourseCountByUserid"  resultType="int">
        select count(     course_id )  from (
select course_id, min(created_at) as  created_at   from  learn_progress  where  user_id=#{userid} GROUP BY course_id)t
where created_at
>= date_add(curdate(), interval - day(curdate()) + 1 day)
    </select>

    <select id="getLastStudyDaysCountByUserid"   resultType="int" >
        select  DATEDIFF(    CURDATE(), Date( max(learn_at) ))  from learn_progress     where user_id=#{userid}
    </select>



    <select id="getMyCollectionList" resultMap="CourseMap">
        select result.* ,
        case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
        case when o3.userct is not null  then o3.userct  else 0 end as collect_count
        from (
        select  * from course
        where indicator=1 and   course_id IN (
        select  item_id from user_favor  where  user_id=#{userid} and item_type='course'  ) )result

        left join (
        select course_id, count(*)  as  renshu from (
        select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
        on result.course_id =o1.course_id
        left join
        (
        select  course_id,    total/ct as pingfen from (
        select course_id, sum(star) as total , count(comment_id) as ct from course_comment  group by course_id)t)o2
        on result.course_id= o2.course_id
        left join
        (
        select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
        on   result.course_id= o3.course_id
        order by  renshu desc, pingfen desc  limit #{skip},#{take};
    </select>



    <select id="getFirstPageCourseList" resultMap="CourseMap">
        select result.* ,
        case when  o1.renshu is not null then  o1.renshu else 0 end  as study_count,
        case when o3.userct is not null  then o3.userct  else 0 end as collect_count
        from (
        select   c.* from course  c     left join course_whitelist w on c.course_id=w.course_id
        where indicator=1 and  created_at > #{scope}  and company_id=#{companyid}   and
        ( type_id=1   or   (  type_id=2  and  w.user_id=#{userid}  )  ) )result

        left join (
        select course_id, count(*)  as  renshu from (
        select  course_id, user_id from learn_progress  group by course_id, user_id)t group by course_id)o1
        on result.course_id =o1.course_id

        left join
        (
        select item_id as course_id,  count(user_id) as userct from  user_favor where item_type='course' group by item_id)o3
        on   result.course_id= o3.course_id
        order by  renshu desc  limit #{skip},#{take};
    </select>


       <insert id="backAddCourseCategory"   parameterType="com.dli.entities.CourseCategory"   useGeneratedKeys="true"   keyProperty="category_id">
           insert course_category  values(  null, #{category_name} ,  #{icon},  #{company_id},  1,   now(), now() )
       </insert>

   <update id="backUpdateCourseCategoryIcon">
       update  course_category set icon = #{icon}  where category_id= #{cateid}
   </update>

    <update id="backUpdateCourseCategoryName">
        update  course_category set category_name = #{catename}  where category_id= #{cateid}
    </update>

    <update id="backDisableCourseCategory">
        update  course_category set indicator = 0  where category_id= #{cateid}
    </update>

     <select id="backGetCourseCategoryByID"  resultType="com.dli.entities.CourseCategory">
         select * from   course_category where category_id=#{cateid}
     </select>


    <insert id="backAddCourseContent"   parameterType="com.dli.entities.CourseContent"   useGeneratedKeys="true"   keyProperty="content_id">
        insert course_content  values ( null, #{sequnce_num}, #{sequnce_title},  #{content} , null, null , #{content_type}, null, 1, now(),now()   )
    </insert>

    <update id="backUpdateCourseContentPath">
        update  course_content set orignal_path = #{path}  where content_id= #{id}
    </update>

    <update id="backUpdateCourseContentLink">
        update  course_content set content_link = #{link}  where content_id= #{id}
    </update>

    <update id="backUpdateCourseContentCourseID">
        update  course_content set course_id = #{courseid}  where content_id= #{id}
    </update>


    <update id="backUpdateCourseContent"   parameterType="com.dli.entities.CourseContent"  >
        update  course_content
        <set>
        <if test="sequnce_num!=null">sequnce_num=#{sequnce_num},</if>
        <if test="sequnce_title!=null">sequnce_title=#{sequnce_title},</if>
        <if test="content!=null">content=#{content},</if>
       <if test="content_type!=null">content_type= #{content_type}</if>
       </set>
where  content_id=#{content_id}
    </update>

    <delete id="backDisableCourseContent">
        update  course_content set indicator = 0  where content_id=#{contentid}
    </delete>

    <select id="backGetCourseContentByID"  resultType="com.dli.entities.CourseContent">
        select * from   course_content where content_id=#{contentid}
    </select>

     <delete id="backDeleteCourseWhilteListByCourseID">
         delete from course_whitelist where course_id =#{courseid}
     </delete>

     <insert id="backAddCourseWhilteListMapping">
         insert  course_whitelist values( #{courseid},  #{userid} )
     </insert>

    <select id="backGetCourseWhiteListByCourseID"  resultType="com.dli.entities.User">
        select u.* from  course_whitelist  m join  user  u      on m.user_id = u.user_id where  m.course_id=#{courseid}
    </select>

    <insert id="backAddCourse" parameterType="com.dli.entities.Course"      useGeneratedKeys="true"   keyProperty="course_id"  >
        insert course  values (  0, #{category_id},#{title}, #{principal_user_id},  #{department}, #{expiration_date},#{intro}  , #{icon}, #{pic}, #{type_id}, 0,#{company_id}, 1,now(),now()   )
    </insert>


    <update id="backUpdateCourseIconAndPic"  parameterType="com.dli.entities.Course">
        update   course    <set>    <if test="icon!=null">icon = #{icon},</if>   <if test="pic!=null"> pic =#{pic}</if>  </set>  where course_id =#{course_id}
    </update>

    <update id="backUpdateCoursePublishStatus">
        update course set ispublished =#{status} where course_id = #{courseid}
    </update>

    <select id="backGetCourseByID" resultType="com.dli.entities.Course">
         select * from course where course_id =#{courseid}
    </select>

    <update id="backUpdateCourse" parameterType="com.dli.entities.Course"    >
        update   course SET category_id=#{category_id},
      title=#{title},
     principal_user_id=#{principal_user_id},
     department=#{department},
   expiration_date=#{expiration_date},
    intro= #{intro},
    icon=#{icon},
     pic=#{pic},
   type_id=#{type_id}
   where course_id=#{course_id}
    </update>
</mapper>