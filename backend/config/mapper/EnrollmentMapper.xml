<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dli.repositories.EnrollmentRepo">

    <resultMap type="com.dli.entities.Enrollment" id="EnrollmentMap">
        <id column="enrollment_id" property="enrollment_id"/>
        <result column="title" property="title"/>
        <result column="intro" property="intro"/>
        <result column="icon" property="icon"/>
        <result column="pic" property="pic"/>
        <result column="company_id" property="company_id"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
    </resultMap>


    <resultMap type="com.dli.entities.EnrollmentComment" id="EnrollmentCommentMap">
        <id column="comment_id" property="comment_id"/>
        <result column="user_id" property="user_id"/>
        <result column="enrollment_id" property="enrollment_id"/>
        <result column="star" property="star"/>
        <result column="comments" property="comments"/>
        <result column="created_at" property="created_at"/>
        <result column="indicator" property="indicator"/>
        <result column="user_idName" property="user_idName"/>
        <result column="user_idAvatar" property="user_idAvatar"/>
    </resultMap>


    <resultMap type="com.dli.entities.EnrollmentContent" id="EnrollmentContentMap">
        <id column="content_id" property="content_id"/>
        <result column="sequnce_num" property="sequnce_num"/>
        <result column="sequnce_title" property="sequnce_title"/>
        <result column="content" property="content"/>
        <result column="enrollment_id" property="enrollment_id"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
    </resultMap>

    <resultMap type="com.dli.entities.EnrollmentPeriod" id="EnrollmentPeriodMap">
        <id column="period_id" property="period_id"/>
        <result column="enrollment_id" property="enrollment_id"/>
        <result column="teacher" property="teacher"/>
        <result column="count" property="count"/>
        <result column="start_date" property="start_date"/>
        <result column="end_date" property="end_date"/>
        <result column="location" property="location"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <result column="study_count" property="study_count"/>
        <result column="collect_count" property="collect_count"/>
        <result column="enrollmentCollected" property="enrollmentCollected"/>
    </resultMap>


    <resultMap type="com.dli.entities.EnrollmentPeriodEnrollment" id="CombineMap">
        <id column="period_id" property="period_id"/>
        <result column="enrollment_id" property="enrollment_id"/>
        <result column="teacher" property="teacher"/>
        <result column="count" property="count"/>
        <result column="start_date" property="start_date"/>
        <result column="end_date" property="end_date"/>
        <result column="location" property="location"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
        <result column="study_count" property="study_count"/>
        <result column="collect_count" property="collect_count"/>
        <result column="enrollmentCollected" property="enrollmentCollected"/>
        <result column="left_count" property="left_count"/>
        <result column="isFinished" property="isFinished"/>
        <result column="isEnrollemntAdded" property="isEnrollemntAdded"/>
        <result column="isReminderAdded" property="isReminderAdded"/>

        <result column="title" property="title"/>
        <result column="intro" property="intro"/>
        <result column="icon" property="icon"/>
        <result column="pic" property="pic"/>
        <result column="company_id" property="company_id"/>
    </resultMap>



    <resultMap type="com.dli.entities.EnrollmentReminderAndTarget" id="ReminderAndTargetMap">
        <id column="period_id" property="period_id"/>
        <result column="target_period_id" property="target_period_id"/>

    </resultMap>


    <resultMap type="com.dli.entities.SearchResult" id="SearchMap">
        <id column="period_id" property="id"/>
        <result column="title" property="title"/>
        <result column="intro" property="intro"/>
        <result column="icon" property="icon"/>
    </resultMap>




     <select id="getEnrollmentPeriodListInprocess"  resultMap="CombineMap">
          select *   , count - study_count as left_count   from (
           select result.*  ,
            case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
            case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count
            from(
         select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
         on p.enrollment_id= e.enrollment_id where    now()  &gt;=start_date  and   now()  &lt; end_date
         and    p.indicator=1 and e.indicator=1 and e.company_id=#{companyid})result
         left join (
         select period_id, count(*)  as  renshu from
         user_enrollment   group by  period_id )o1   on  result.period_id =o1.period_id
         left join(
         select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
         on   result.period_id= o2.period_id
         )t where count  &gt; study_count
         order by study_count desc, start_date  desc  limit #{skip},#{take};

     </select>


      <select id="getEnrollmentPeriodListFinished"  resultMap="CombineMap">
            select *   , count - study_count as left_count   from (
           select result.*  ,
            case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
            case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count,
            case when   now()  &lt; end_date then 0 else 1 end as isFinished,
             case when o3.period_id is null then 0 else 1 end as isReminderAdded
            from(
         select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
         on p.enrollment_id= e.enrollment_id where
           p.indicator=1 and e.indicator=1 and e.company_id=#{companyid})result
         left join (
         select period_id, count(*)  as  renshu from
         user_enrollment  group by  period_id )o1   on  result.period_id =o1.period_id
         left join(
         select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
         on   result.period_id= o2.period_id

         left join(
         select * from  user_enrollment_reminder  where user_id= #{userid})o3
         on   result.period_id= o3.period_id
         )t where count   &lt;= study_count   or   now()  &gt;= end_date
         order by study_count desc, start_date  desc  limit   #{skip},#{take};

      </select>

     <select id="getReminderMappingCount"  resultType="int">
    select count(*) from  user_enrollment_reminder  where period_id=#{periodid} and user_id=#{userid};
     </select>

    <insert id="addReminderMapping" >
    insert   user_enrollment_reminder  values(  #{periodid}, #{userid}, 0 ,null   );
    </insert>


    <select id="getEnrollmentPeriodByID"  resultMap="CombineMap">
         select *   , count - study_count as left_count   from (
           select result.*  ,
            case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
            case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count
            from(
         select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
         on p.enrollment_id= e.enrollment_id where
       p.indicator=1 and e.indicator=1 and p.period_id=#{periodid})result
         left join (
         select period_id, count(*)  as  renshu from
         user_enrollment  GROUP  by period_id)o1   on  result.period_id =o1.period_id
         left join(
         select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
         on   result.period_id= o2.period_id
         )t
    </select>


    <select id="getEnrollmentMappingCount"  resultType="int">
        select count(*) from  user_enrollment  where period_id=#{periodid} and user_id=#{userid};
    </select>

    <insert id="addEnrollmentMapping" >
        insert   user_enrollment  values(  #{periodid}, #{userid}  );
    </insert>


    <select id="getEnrollmentContentListByID"  resultMap="EnrollmentContentMap">
           select * from  enrollment_content  where enrollment_id in
         ( select enrollment_id from enrollment_period  where period_id=#{periodid} )  order by sequnce_num
    </select>



    <insert id="addEnrollmentComment" >
        insert  enrollment_comment values(null, #{userid},#{enrollmentid}, #{star},#{comment}, now() ,1 );
    </insert>

    <select id="getEnrollmentCommentList" resultMap="EnrollmentCommentMap">
        select  c.*  , u.full_name as user_idName, u.avatar as   user_idAvatar from   enrollment_comment  c  join user u on  c.user_id=u.user_id  where c.indicator =1
        and  enrollment_id=#{enrollmentid}   order by  c.created_at desc;
    </select>


    <select id="getMyEnrollmentListEnrolled"  resultMap="CombineMap">

          select *   , count - study_count as left_count   from (
           select result.*  ,
            case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
            case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count,
                 case when   now()  &lt; end_date then 0 else 1 end as isFinished
            from(
         select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
         on p.enrollment_id= e.enrollment_id where
        p.indicator=1 and e.indicator=1 and e.company_id=#{companyid})result
         left join (
         select period_id, count(*)  as  renshu from
         user_enrollment   group by  period_id )o1   on  result.period_id =o1.period_id
         left join(
         select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
         on   result.period_id= o2.period_id

           join
         (

         select  period_id from  user_enrollment where user_id=#{userid}
         )o3
          on   result.period_id= o3.period_id

         )t
         order by study_count desc, start_date  desc  limit #{skip},#{take};


    </select>


    <select id="getMyEnrollmentListInReminder"  resultMap="CombineMap">

    select *   , count - study_count as left_count   from (
    select result.*  ,
    case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
    case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count,
    case when   now()  &lt; end_date then 0 else 1 end as isFinished
    from(
    select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
    on p.enrollment_id= e.enrollment_id where
    p.indicator=1 and e.indicator=1 and e.company_id=#{companyid})result
    left join (
    select period_id, count(*)  as  renshu from
    user_enrollment   group by  period_id )o1   on  result.period_id =o1.period_id
    left join(
    select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
    on   result.period_id= o2.period_id
    join
    (
    select  period_id from  user_enrollment_reminder where user_id=#{userid}
    )o3
    on   result.period_id= o3.period_id
    join
    (
    select enrollment_id , max(period_id) as period_id from   enrollment_period where  enrollment_id in (
    select   enrollment_id from    enrollment_period where   period_id in (
    select   period_id  from   user_enrollment_reminder  where user_id= #{userid}
    ))  group by enrollment_id
    )o4  on result.enrollment_id=o4.enrollment_id and   result.period_id= o4.period_id
    )t
    order by study_count desc, start_date  desc  limit #{skip},#{take};
    </select>

    <select id="getMyCollectionList"  resultMap="CombineMap">
        select *   , count - study_count as left_count   from (
        select result.*  ,
        case  when  o1.renshu is not null then o1.renshu   else 0  end  as study_count,
        case  when   o2.userct  is not null then    o2.userct  else 0 end as collect_count,
       case when   now()  &lt; end_date then 0 else 1 end as isFinished
        from(
        select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
        on p.enrollment_id= e.enrollment_id where   p.period_id in(select  item_id from user_favor  where  user_id=#{userid} and item_type='enrollment')
        and    p.indicator=1 and e.indicator=1)result
        left join (
        select period_id, count(*)  as  renshu from
        user_enrollment   group by  period_id )o1   on  result.period_id =o1.period_id
        left join(
        select item_id as period_id,  count(user_id) as userct from  user_favor where item_type='enrollment' group by item_id)o2
        on   result.period_id= o2.period_id
        )t
        order by study_count desc, start_date  desc  limit #{skip},#{take};

    </select>

    <select id="getReminderList"    resultMap="ReminderAndTargetMap">
        select  o1.period_id , o2.period_id as  target_period_id from (
select p.enrollment_id   ,r.* from     enrollment_period   p join   ( select  *  from  user_enrollment_reminder where user_id =#{userid}  and   is_read=0)r
  on    p.period_id =r.period_id)o1
join (  select       enrollment_id,  max(period_id)  as period_id   from  enrollment_period  where enrollment_id in ( select    enrollment_id from  enrollment_period where period_id in (
 select  period_id  from  user_enrollment_reminder where   is_read=0  and user_id =#{userid} ))    group by    enrollment_id  )o2
on o1.enrollment_id =o2.enrollment_id  where  o1.period_id != o2.period_id
    </select>

    <update id="updateReadReminder">
        update  user_enrollment_reminder   set is_read =1   ,read_date = now() where   period_id=#{periodid} and user_id=#{userid}
    </update>


    <select id="searchEnrollment" resultMap="SearchMap">
         select  p.*  ,   e.title, e.intro, e.icon, e.pic,e.company_id from enrollment_period  p   join   enrollment   e
         on p.enrollment_id= e.enrollment_id where
           p.indicator=1 and e.indicator=1 and e.company_id=#{companyid} and  e.title like '%${keyword}%'  limit #{skip},#{take};
    </select>

    <select id="backGetEnrollmentList"  parameterType="com.dli.entities.backEnrollment"  resultType="com.dli.entities.backEnrollment">
       select * from (
        select  p.period_id,   e.enrollment_id,  e.title, p.teacher,DATE_FORMAT(p.start_date,'%Y-%m-%d')  as   start,  DATE_FORMAT(p.end_date,'%Y-%m-%d')  as end,   p.count  from  enrollment_period  p  join enrollment  e   on p.enrollment_id = e.enrollment_id
 where  p.indicator=1 and e.indicator =1 and   e.company_id=#{company_id})t
 where  1=1
        <if test="title!=null">and title like '%${title}%'</if>
        <if test="teacher!=null">and teacher like '%${teacher}%' </if>
        <if test="start!=null">and start =#{start}</if>
        <if test="end!=null">and end =#{end}</if>
        order by    start desc    limit #{skip}, #{take}
    </select>



    <select id="backGetEnrollmentListCount"  parameterType="com.dli.entities.backEnrollment"  resultType="int">
        select count(*) from (
        select  p.period_id,   e.enrollment_id,  e.title, p.teacher,DATE_FORMAT(p.start_date,'%Y-%m-%d')  as   start,  DATE_FORMAT(p.end_date,'%Y-%m-%d')  as end,   p.count  from  enrollment_period  p  join enrollment  e   on p.enrollment_id = e.enrollment_id
        where  p.indicator=1 and e.indicator =1 and   e.company_id=#{company_id})t
        where  1=1
        <if test="title!=null">and title like '%${title}%'</if>
        <if test="teacher!=null">and teacher like '%${teacher}%' </if>
        <if test="start!=null">and start =#{start}</if>
        <if test="end!=null">and end =#{end}</if>
    </select>

    <select id="backGetEnrollmentCommentList" resultMap="EnrollmentCommentMap">
        select  c.*  , u.full_name as user_idName, u.avatar as   user_idAvatar from   enrollment_comment  c  join user u on  c.user_id=u.user_id  where c.indicator =1
        and  enrollment_id=#{enrollmentid}   order by  c.created_at desc    limit #{skip}, #{take};
    </select>


    <select id="backGetEnrollmentCommentListCount"     resultType="int">
        select    count(*) from   enrollment_comment  c  join user u on  c.user_id=u.user_id  where c.indicator =1
        and  enrollment_id=#{enrollmentid}
    </select>



    <select id="backGetEnrollmentResultList"  parameterType="com.dli.entities.backEnrollment"  resultType="com.dli.entities.backEnrollment">
        select  t.* ,
        case   when   m1.countThisPeriod  is not null then    m1.countThisPeriod    else 0  end   as  countThisPeriod ,
        case when  m2.dateCountNextPeriod  is not null then  m2.dateCountNextPeriod   else 0   end as  dateCountNextPeriod
        from (
        select  p.period_id,   e.enrollment_id,  e.title, p.teacher,DATE_FORMAT(p.start_date,'%Y-%m-%d')  as   start,  DATE_FORMAT(p.end_date,'%Y-%m-%d')  as end,   p.count  from  enrollment_period  p  join enrollment  e   on p.enrollment_id = e.enrollment_id
        where  p.indicator=1 and e.indicator =1 and   e.company_id=#{company_id})t
        left JOIN
        (select   m.period_id,   count(*)  as countThisPeriod   from   enrollment_period  p join     user_enrollment  m on p.period_id=  m.period_id  group by  m.period_id)m1
        on t.period_id =   m1.period_id
        left join
        ( select   m.period_id,   count(*)  as   dateCountNextPeriod     from   enrollment_period  p join     user_enrollment_reminder  m on p.period_id=  m.period_id  group by  m.period_id)m2
        on t.period_id =   m2.period_id
        where  1=1
        <if test="title!=null">and title like '%${title}%'</if>
        <if test="teacher!=null">and teacher like '%${teacher}%' </if>
        <if test="start!=null">and start =#{start}</if>
        <if test="end!=null">and end =#{end}</if>
        order by    start desc    limit #{skip}, #{take}
    </select>

    <select id="backGetEnrollmentResultListCount"  parameterType="com.dli.entities.backEnrollment"  resultType="int">
        select  count(*)
        from (
        select  p.period_id,   e.enrollment_id,  e.title, p.teacher,DATE_FORMAT(p.start_date,'%Y-%m-%d')  as   start,  DATE_FORMAT(p.end_date,'%Y-%m-%d')  as end,   p.count  from  enrollment_period  p  join enrollment  e   on p.enrollment_id = e.enrollment_id
        where  p.indicator=1 and e.indicator =1 and   e.company_id=#{company_id})t
        left JOIN
        (select   m.period_id,   count(*)  as countThisPeriod   from   enrollment_period  p join     user_enrollment  m on p.period_id=  m.period_id  group by  m.period_id)m1
        on t.period_id =   m1.period_id
        left join
        ( select   m.period_id,   count(*)  as   dateCountNextPeriod     from   enrollment_period  p join     user_enrollment_reminder  m on p.period_id=  m.period_id  group by  m.period_id)m2
        on t.period_id =   m2.period_id
        where  1=1
        <if test="title!=null">and title like '%${title}%'</if>
        <if test="teacher!=null">and teacher like '%${teacher}%' </if>
        <if test="start!=null">and start =#{start}</if>
        <if test="end!=null">and end =#{end}</if>
    </select>

      <select id="backGetUserListThisEnrollmentPeriod"  resultType="com.dli.entities.User">
          select   u.*  from    user_enrollment  m join user  u on m.user_id = u.user_id    where  m.period_id= #{periodid}    limit   #{skip},#{take};
      </select>


    <select id="backGetUserListThisEnrollmentPeriodCount"  resultType="int">
        select  count(*)  from    user_enrollment     where  period_id= #{periodid}
    </select>


    <select id="backGetUserListNextEnrollmentPeriod"  resultType="com.dli.entities.User">
        select   u.*  from    user_enrollment_reminder  m join user  u on m.user_id = u.user_id    where  m.period_id= #{periodid}    limit   #{skip},#{take};
    </select>


    <select id="backGetUserListNextEnrollmentPeriodCount"  resultType="int">
        select  count(*)  from    user_enrollment_reminder     where  period_id= #{periodid}
    </select>
    
    <update id="backDisableEnrollmentPeriod">
        update enrollment_period set  indicator =0 where period_id=#{periodid}
    </update>

    <select id="backGetEnrollment"  resultType="com.dli.entities.Enrollment">
            select * from enrollment where enrollment_id=#{enrollmentid}
    </select>

    <select id="backGetEnrollmentPeriod"  resultType="com.dli.entities.EnrollmentPeriod">
  select * from    enrollment_period  where period_id=#{periodid}
    </select>


    <select id="backGetEnrollmentContent"   resultType="com.dli.entities.EnrollmentContent">
    select * from enrollment_content where    indicator=1      and    enrollment_id=#{enrollmentid}
    </select>

    <insert id="backAddEnrollment"   parameterType="com.dli.entities.EnrollmentContent"    useGeneratedKeys="true"   keyProperty="enrollment_id">
        insert  enrollment values(   null ,  #{title},  #{intro},  #{icon}, #{pic} ,  #{company_id} ,  1    , now(),  now()   )
    </insert>

    <insert id="backAddEnrollmentPeriod"  parameterType="com.dli.entities.EnrollmentPeriod"    useGeneratedKeys="true"   keyProperty="period_id">
        insert   enrollment_period values(  0,  #{enrollment_id},  #{teacher} ,  #{count}  ,   #{start_date}, #{end_date},   #{location} ,1   ,  now(), now() )
    </insert>

    <insert id="backAddEnrollmentContent"  parameterType="com.dli.entities.EnrollmentContent"    useGeneratedKeys="true"   keyProperty="content_id">
        insert enrollment_content values(  0,  #{sequnce_num},  #{sequnce_title}, #{content},  #{enrollment_id}, 1 ,now(), now() )
    </insert>

    <update id="backUpdateEnrollmentIconAndPic"  parameterType="com.dli.entities.Enrollment">
        update   enrollment    <set>    <if test="icon!=null">icon = #{icon},</if>   <if test="pic!=null"> pic =#{pic}</if>  </set>  where enrollment_id =#{enrollment_id}
    </update>

    <update id="backUpdateEnrollment"   parameterType="com.dli.entities.Enrollment">
        update  enrollment set title = #{title}, intro = #{intro}, icon= #{icon}, pic= #{pic}, updated_at =now()  where enrollment_id= #{enrollment_id}
    </update>

    <update id="backUpdateEnrollmentPeriod"    parameterType="com.dli.entities.EnrollmentPeriod">

        update  enrollment_period   set  teacher= #{teacher}, count= #{count},  start_date=#{start_date}, end_date= #{end_date},location=#{location}, updated_at=now()
where period_id=#{period_id}
    </update>

    <update id="backUpdateEnrollmentContent"  parameterType="com.dli.entities.EnrollmentContent">
        update   enrollment_content  set  sequnce_num=#{sequnce_num}, sequnce_title=#{sequnce_title}, content= #{content}  , updated_at=now() where content_id=#{content_id}
    </update>

    <update id="backDisableEnrollmentContent">
        update enrollment_content set  indicator =0 where content_id=#{contentid}
    </update>
</mapper>