<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dli.repositories.UserRepo">

    <resultMap type="com.dli.entities.User" id="UserMap">
        <id column="user_id" property="user_id"/>
        <result column="cell_phone" property="cell_phone"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="job_number" property="job_number"/>
        <result column="avatar" property="avatar"/>
        <result column="full_name" property="full_name"/>
        <result column="company_id" property="company_id"/>
        <result column="token" property="token"/>
        <result column="indicator" property="indicator"/>
        <result column="created_at" property="created_at"/>
        <result column="updated_at" property="updated_at"/>
    </resultMap>


    <select id="getUserByUserID" resultMap="UserMap">
        select * from user where user_id = #{userid}  ;
    </select>


    <update id="updatePasswordByUserid">
        update   user  set   password =#{password}  where user_id=#{userid}
    </update>


    <update id="UpdateUserPic"  >
        update   user set   avatar  = #{avatar} where user_id= #{userid}
    </update>


    <insert id="backAddUser"    parameterType="com.dli.entities.User"   useGeneratedKeys="true"   keyProperty="user_id" >
        insert  user values(  0, #{cell_phone}, #{password},#{email}, #{job_number}, #{avatar},#{full_name}, #{department} ,#{area},  #{token},#{company_id},1,now(),now())
    </insert>

    <insert id="backAddUserRoleMapping"  >
       insert user_role values( #{userid}, #{roleid} )
    </insert>

    <update id="backUpdateUser"  parameterType="com.dli.entities.User" >
        update  user
set  cell_phone =#{cell_phone},
email=#{email},
job_number=#{job_number},
full_name=#{full_name},
department=#{department},
area=#{area},
updated_at =now()
where user_id=#{user_id}
    </update>

    <select id="backGetUserList"  resultMap="UserMap">
        select * from user where company_id=#{company_id} and indicator=1
           <if test="full_name!=null">and full_name like '%${full_name}%'</if>
           <if test="cell_phone!=null">and cell_phone like '%${cell_phone}%' </if>
           <if test="department!=null">and department like '%${department}%'</if>
           <if test="area!=null">and area like '%${area}%'</if>
        limit #{skip}, #{take}
    </select>


    <select id="backGetUserListCount"   resultType="int">
        select count(*) from user where company_id=#{company_id} and indicator=1
        <if test="full_name!=null">and full_name like '%${full_name}%'</if>
        <if test="cell_phone!=null">and cell_phone like '%${cell_phone}%' </if>
        <if test="department!=null">and department like '%${department}%'</if>
        <if test="area!=null">and area like '%${area}%'</if>
    </select>

    <update id="backDisableUserByID">
          update  user set  indicator=0 where user_id =#{userid}
    </update>

    <select id="backGetCompanyAdminList"   resultMap="UserMap">
        select u.* from user  u join user_role   m on u.user_id = m.user_id where m.role_id =2 and u.company_id =#{companyid}    and  indicator=1   limit #{skip}, #{take}
    </select>


    <select id="backGetCompanyAdminListCount"    resultType="int">
        select  count(*) from user  u join user_role   m on u.user_id = m.user_id where m.role_id =2 and u.company_id =#{companyid}   and  indicator=1
    </select>

    <update id="backUpdateUserRole" >
        update  user_role set role_id= #{roleid} where user_id =#{userid}
    </update>



    <select id="backGetCompanyEmployeeList"   resultMap="UserMap">
        select u.* from user  u join user_role   m on u.user_id = m.user_id where m.role_id =1 and u.company_id =#{companyid}   and  indicator=1
        <if test="fullname!=null">   and u.full_name like '%${fullname}%'</if>
           limit #{skip}, #{take}
    </select>


    <select id="backGetCompanyEmployeeListCount"    resultType="int">
        select  count(*) from user  u join user_role   m on u.user_id = m.user_id where m.role_id =1 and u.company_id =#{companyid}  and  indicator=1

        <if test="fullname!=null">   and u.full_name like '%${fullname}%'</if>
    </select>

     <insert id="adminAddPlatformUser"    parameterType="com.dli.entities.User"   useGeneratedKeys="true"   keyProperty="user_id"  >
            insert  user values(  0, #{cell_phone}, #{password},#{email}, null, #{avatar},#{full_name}, null ,null,   #{token} , null,1,now(),now())
     </insert>



    <update id="adminUpdatePlatformUser"  parameterType="com.dli.entities.User" >
        update  user
        set  cell_phone =#{cell_phone},
        email=#{email},

        full_name=#{full_name},

        updated_at =now()
        where user_id=#{user_id}
    </update>

    <select id="adminGetPlatformUserList"  resultMap="UserMap">
        select * from user   u join user_role  m  on m.user_id =u.user_id   where m.role_id=3 and  u.indicator=1
        limit #{skip}, #{take}
    </select>


    <select id="adminGetPlatformUserListCount"   resultType="int">
        select count(*) from user   u join user_role  m  on m.user_id =u.user_id   where m.role_id=3 and  u.indicator=1
        limit #{skip}, #{take}
    </select>


    <select id="adminGetEmployeeStatistics"  resultType="com.dli.entities.adminMonthCountStatistics">
      select a.m1 as month ,
  case   when   b.count   is not null then  b.count   else  0  end as   count
  from (
 select  DATE_FORMAT( date_add( now() , interval -11 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -10 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -9 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -8 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -7 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -6 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -5 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -4 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -3 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -2 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -1 month   ) ,'%Y-%m') as m1  union
 select  DATE_FORMAT( date_add( now() , interval -0 month   ) ,'%Y-%m') as m1  )a
left  join
(select month , count(user_id) as count from (
select  u.user_id,  DATE_FORMAT(u.created_at,'%Y-%m') as month  from  user   u join   user_role m  on m.user_id = u.user_id where  u.indicator=1  and  m.role_id !=3
 and u.created_at >=
  DATE_FORMAT( date_add( date_add( now(), interval - day( now()) + 1 day  ) , interval -11 month   ) ,'%Y-%m-%d')
)t  group by  month  )b  on a.m1 =b.month  order by a.m1
    </select>

    <select id="backGetUserCountByCompanyID"  resultType="int">
        select count(*) from  user where company_id=#{companyid} and indicator =1
    </select>


    <insert id="addMessage"     >
        insert  short_message  values(   0,  #{cellphone},  #{messageparam}, #{templatecode} ,   null, null,null,null,  0,    #{msgtype}, now(),     null  )
    </insert>

    <select id="jobGetMessageList"  resultType="com.dli.entities.Message">
        select * from     short_message where   (resultcode is null or resultcode != 'OK' ) and retrycount  &lt;6
    </select>



    <update id="jobUpdateMessage"    parameterType="com.dli.entities.Message">
        update  short_message  set resultcode=#{resultcode} ,resultmessage =#{resultmessage}, requestid =  #{requestid}, bizid= #{bizid},retrycount=  #{retrycount}, updated_at=  now()
  where id = #{id}
    </update>

    <select id="getUserByCellphone"       resultType="int"  >
        select count(*) from    user where cell_phone =   #{cellphone}
    </select>



</mapper>